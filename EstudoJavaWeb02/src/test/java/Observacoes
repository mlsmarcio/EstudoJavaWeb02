ECLIPSE IDE, JAVA = 11, JRE = JDK 11
PROJETO 
- DYNAMIC web PROJECT
- JRE = JDK 11, JAVA 11
- FACETS = JAVA 11
- APACHE 10  
- PostgreSql 1.22.1 

OBS.: PARA O APACHE 10, O CTRL + SHIFT+ O IMPORTA AS BIBLIOTECAS DO SERVLET jakarta.servlet.ServletException, MAS, PARA O 
- APACHE COM VERSÃO MENOR, EXEMPLO 9:
-- OS IMPORTES SERÃO CRIADOS DO javax.servlet
-- PESQUISAR NO GOOGLE javax.servlet maven
-- SELECIONAR java Servlet API 4.0.1
-- COPIAR A DEPENDÊNCIA E COLOCAR NO ARQUIVO pom.xml, abrir tag <dependencies> e colar a dependência, ao salvar o Maven baixa
os arquivos necessário.

PARA IMPLANTAR O PROJETO COM APACHE 10, NO SERVIDOR COM APACHE A BAIXO DA VERSÃO 10, OCORRERÁ INCOMPATIBILIDADES.
PARA IMPLANTAR O PROJETO COM APACHE 9 , NO SERVIDOR APACHE 10, NÃO OCORRERÁ INCOMPATIBILIDADE.

CONVERTER O PROJETO PARA PROJETO MAVEN
- BOTÃO DIREITO NO PROJETO
- CONFIGURE

APÓS CRIAR UM SERVLET (apache 10)
- CTRL + SHIFIT + O PARA IMPORTAR AS BIBLIOTECAS
- SALVAR.

FILTER (CTRL + SHIFIT + 0 PARA IMPORTAR AS BIBLIOTECAS JACKARTA SERVLET FILTER)
- Intercepta todas as requisições e respostas do projeto
- Normalmente verifica se o usuário está logado, se não, envia para a página de login

AO CRIAR CLASSES DE MODELO, SEMPRE IMPLEMENTAR A CLASSE Serializable
- Ex.:
public class ModelLogin implements Serializable{
	private static final long serialVersionUID = 1L;
}

--------------
CLASSE DE CONEXÃO
 - PESQUISAR "POSTGRESSQL MAVEN"
 - acessar: https://mvnrepository.com/artifact/org.postgresql/postgresql
 - selecionar: 	9.4.1212
 - copiar código da dependência e colocar no arquivo pom.xml na tag <dependencies> após </description>
 
 ------------
 CRIAR O BANCO DE DADOS
 
 ------------
 CRIAR A PÁGINA DE ERROS
 
 
 CTRL + SHIFT +  I para obter resultado do código selecionado no debug
 
 ------------
 TRABALHAR COM JSON
  - PESQUISAR "jackson databind json maven"
  - Acessar: https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
  - Selecionar: 2.12.3
  - copiar código da dependência e colocar no arquivo pom.xml na tag <dependencies> após </description>
  
  
 ---------------------------------
 TRABALHANDO COM JASPER 
 
 INSTALAR O JASPER
 - https://community.jaspersoft.com/project/jaspersoft-studio/releases
 
 BAIXAR AS DENPENDÊNCIAS CONFORME A VERSÃO
 		<!-- https://mvnrepository.com/artifact/net.sf.jasperreports/jasperreports -->
		<dependency>
		    <groupId>net.sf.jasperreports</groupId>
		    <artifactId>jasperreports</artifactId>
		    <version>6.17.0</version>
		</dependency>
		
CONFIGURAR O JAVA NO ARQUIVO DE CONFIGURAÇÃO DO JASPER 
- jasperssoft Studio.ini, colocar o path do java após -vm
  -vm
  C:\Program Files\Java\jdk-11.0.2\bin

CRIANDO UM RELATÓRIO
- No jasper - File - New - Other - Jasper Reports Project
- No eclipse - seleciona o pacote do código fonte do java  ( src/main/java )
  - botão direito - export, selecione um local para gerar o jar
- No relatório   jasper
  - botão direito no projeto, java build path, Libraries
  - selecione Classpath e Add External Jars
  - selecione o jar exportado, aplica e fecha
  
  - botão direito no projeto, new other, sselecione Jasper Report
  - defina o relatório, em branco, nome, projeto next, next finish
  - selecione o arquivo jrxml, click em DataSet and Query .., click em java Bean, em ... localize a classe ex.: modelLogin
  - Adicione os campos necessários, eles aparecerão em field
  - para compilar o relatório click em Compiler Reporter
 
 COLOCANDO O RELATÓRIO NO PROJETO ECLIPSE
  - crie um pacote
  - localize os arquivos do relatório pelo jasper em propriedades do projeto, copie os arquivos e cole no pacote do projeto eclipse
  - para editar, abra o arquivo jrxml com o jasper
  - criar uma classe para imprimir o relatório em PDF, crie um pacote "util" e a classe ReportUtil
  
  
    
  
  
   
  



 